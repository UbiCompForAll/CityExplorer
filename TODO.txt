ONGOING:

For Tablets
===========
I have removed this method; the composition tool is only invoked from Start.
	private void showComposerInWebView() {
		wantToGoBack = true; // Disable required double-press on back-key

		//String url = "http://129.241.200.195:8080/UbiComposer?json="+parameters;
		JSONObject parameters = null;
		String objectString = "{\"gutter_url\" : \"\",  \"sort_order\" : \"popularity\",  \"result\" : [ { \"afs\" : \"Y\", \"release_year\" : 1979, \"album_sort\" : \"Wall, The\" } ] }";
		try {
			parameters = new JSONObject( objectString.trim() );
		} catch (JSONException e) {
			e.printStackTrace();
		}
		String url = "http://129.241.200.195:8080/UbiComposerTest/UbiComposer.html" +
				"?library=TestDescriptor.ubicompdescriptor&json=" + parameters;
			//String url = "http://78.91.26.243:8080/UbiComposer/UbiComposer.html?library=Test.ubicompdescriptor"; // Mohammad's laptop
		debug(0, "url is "+url );

		//Toast.makeText(this, "Going to WebView", Toast.LENGTH_SHORT).show();
		// make json
		/*
		Send JSON context:
			List of URIs: To the available DB (-provider) (with specific Table-names: POIs in TrondheimDB, for example)
			List of Library-URI: Which Trigger/Building Block to load on invocation
				Always include Generic.library in the list
				
//TODO: http://developer.android.com/reference/android/content/ContentProvider.html

		Implement ContentProvider
			query( URI, COLS, CONDITIONS, CONDITION_VALUES, SORTING )
			URI: cityExplorer/POI or cityExplorer/POI/14
			COLS: Name ( always include hidden ID_COL, possibly null )
			CONDITIONS: null
			COND_VALUES: null
			SORT: By name - Ascending

		Other types of queries
			Pick (Must provide its own User Interface)

		Composition
			Trigger:
				Arriving at POI (Need URI for POI-table, column names, ID_COLUMN)
			Step:
				Send SMS with
					Text with name-reference from Trigger,
					Phone Number from PhoneBook on the phone, use PICK/ContentProvider
			Info:
				Name of the POI,
				Phone number from AddressBook
		*/
		
		Toast.makeText(this, "Loading UbiComposer", Toast.LENGTH_LONG).show();

//Testing how to launch a specific intent for the Firefox browser, Or Use Webview (below)
		Intent intent = new Intent(Intent.ACTION_MAIN, null);
		intent.addCategory(Intent.CATEGORY_LAUNCHER);
		intent.setComponent(new ComponentName("org.mozilla.firefox", "org.mozilla.firefox.App"));
		intent.setAction("org.mozilla.gecko.BOOKMARK");
		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		intent.putExtra("args", "--url=" + url);
		intent.setData(Uri.parse(url));
		startActivity(intent);

// For Android WebView
//		setContentView(R.layout.weblayout);	//What happens here
//		webview = (WebView) findViewById(R.id.myWebView);
//		if (webview == null){
//			debug(0, "Where is wv? Remember setContentView(R.layout.webLayout)!" );
//		}else{
//			webview.getSettings().setJavaScriptEnabled(true);
//			if ( CityExplorer.ensureConnected(this) ){ //For downloading DBs //Make sure WiFi or Data connection is enabled
//				webview.loadUrl(url);
//
//				webview.addJavascriptInterface(new JavaScriptInterface(this), "Android");
//				webview.setWebViewClient( new WebViewClient() );
//				webview.getSettings().setJavaScriptEnabled(true);
//				webview.getSettings().setBuiltInZoomControls(true);
//
////Verifying that our Javascript Interface class "Android" works
////		webview.loadData(""
////				+"<INPUT type=button onClick=\"showAndroidToast('Hello Android!')\" name\"NAME\"></INPUT>"
////				+"<script type=\"text/javascript\">"
////				+"  function showAndroidToast(toast) {"
////				+"		Android.showToast(toast);"
////				+"	}"
////				+"</script>"
////
////				+"Click a term in the list...", "text/hml", "utf-8");
//
//				//OK...
//				//setupWebDBs( webview );
//			}else{
//				webview.loadData("Click to activate composer<BR>", "text/html", "utf-8");
//				webview.setOnTouchListener(this);
//				CityExplorer.showNoConnectionDialog( this, "", "", null, 0 );
//			}//If connected, else wait for connection and click
//		}// if webView found
	}//showComposerInWebView
